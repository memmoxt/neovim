let SessionLoad = 1
let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1
let v:this_session=expand("<sfile>:p")
silent only
silent tabonly
cd ~
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
let s:shortmess_save = &shortmess
if &shortmess =~ 'A'
  set shortmess=aoOA
else
  set shortmess=aoO
endif
badd +1 Documents/Training/django/my_project/app/views.py
badd +5 Documents/Training/django/my_project/app/urls.py
badd +1 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/default_files/keymap.c
badd +21 .config/nvim/lua/plugins/colorschemes/transparent.lua
badd +90 .config/nvim/lua/plugins/tools/navbuddy.lua
badd +1 .config/nvim/lua/plugins/core/cmp.lua
badd +59 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/keymap.c
badd +1 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/default_files/config.h
badd +1 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/files/memmoxt_crkbd.json
badd +12 notes/index.norg
badd +65 notes/documents/Crkbd/crkbd_setup.norg
badd +1 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/files/memmo_keymap.c
badd +1 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/files/my2024keymap_crkbd.json
badd +1 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/files/keymap.c
badd +1 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/files/rules.mk
badd +1 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/files/images/layer\ images/canvas_font.clip
badd +2 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/rules.mk
badd +77 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/config.h
argglobal
%argdel
edit Documents/Training/django/my_project/app/views.py
argglobal
balt qmk_firmware/keyboards/crkbd/keymaps/memmoxt/keymap.c
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=99
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
8,21fold
28,30fold
26,33fold
49,53fold
39,53fold
37,55fold
36,55fold
let &fdl = &fdl
let s:l = 1 - ((0 * winheight(0) + 25) / 51)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 1
normal! 0
tabnext 1
if exists('s:wipebuf') && len(win_findbuf(s:wipebuf)) == 0 && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20
let &shortmess = s:shortmess_save
let s:sx = expand("<sfile>:p:r")."x.vim"
if filereadable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &g:so = s:so_save | let &g:siso = s:siso_save
set hlsearch
nohlsearch
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
