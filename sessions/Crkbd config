let SessionLoad = 1
let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1
let v:this_session=expand("<sfile>:p")
silent only
silent tabonly
cd ~
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
let s:shortmess_save = &shortmess
if &shortmess =~ 'A'
  set shortmess=aoOA
else
  set shortmess=aoO
endif
badd +1 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/default_files/keymap.c
badd +21 .config/nvim/lua/plugins/colorschemes/transparent.lua
badd +90 .config/nvim/lua/plugins/tools/navbuddy.lua
badd +1 .config/nvim/lua/plugins/core/cmp.lua
badd +197 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/keymap.c
badd +1 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/default_files/config.h
badd +1 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/files/memmoxt_crkbd.json
badd +12 notes/index.norg
badd +63 notes/documents/Crkbd/crkbd_setup.norg
badd +1 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/files/memmo_keymap.c
badd +1 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/files/my2024keymap_crkbd.json
badd +1 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/files/keymap.c
badd +1 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/files/rules.mk
badd +1 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/files/images/layer\ images/canvas_font.clip
badd +2 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/rules.mk
badd +77 qmk_firmware/keyboards/crkbd/keymaps/memmoxt/config.h
argglobal
%argdel
edit qmk_firmware/keyboards/crkbd/keymaps/memmoxt/keymap.c
let s:save_splitbelow = &splitbelow
let s:save_splitright = &splitright
set splitbelow splitright
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
2wincmd h
wincmd w
wincmd w
let &splitbelow = s:save_splitbelow
let &splitright = s:save_splitright
wincmd t
let s:save_winminheight = &winminheight
let s:save_winminwidth = &winminwidth
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe 'vert 1resize ' . ((&columns * 30 + 46) / 92)
exe 'vert 2resize ' . ((&columns * 59 + 46) / 92)
exe 'vert 3resize ' . ((&columns * 1 + 46) / 92)
argglobal
enew
file NvimTree_1
balt qmk_firmware/keyboards/crkbd/keymaps/memmoxt/keymap.c
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=99
setlocal fml=1
setlocal fdn=20
setlocal nofen
lcd ~/qmk_firmware/keyboards/crkbd/keymaps/memmoxt
wincmd w
argglobal
balt ~/qmk_firmware/keyboards/crkbd/keymaps/memmoxt/config.h
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=99
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
1,19fold
22,24fold
83,85fold
82,87fold
93,99fold
92,101fold
107,113fold
115,121fold
123,129fold
131,137fold
139,145fold
147,153fold
155,161fold
163,169fold
171,177fold
179,185fold
187,193fold
197,199fold
201,203fold
205,207fold
209,211fold
213,215fold
217,219fold
221,223fold
225,227fold
229,231fold
233,235fold
237,239fold
241,243fold
196,244fold
104,245fold
248,254fold
247,256fold
81,259fold
let &fdl = &fdl
let s:l = 59 - ((2 * winheight(0) + 19) / 38)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 59
normal! 0
wincmd w
argglobal
if bufexists(fnamemodify("~/notes/documents/Crkbd/crkbd_setup.norg", ":p")) | buffer ~/notes/documents/Crkbd/crkbd_setup.norg | else | edit ~/notes/documents/Crkbd/crkbd_setup.norg | endif
if &buftype ==# 'terminal'
  silent file ~/notes/documents/Crkbd/crkbd_setup.norg
endif
balt ~/notes/index.norg
setlocal fdm=manual
setlocal fde=nvim_treesitter#foldexpr()
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=99
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
1,9fold
16,19fold
14,19fold
13,19fold
21,24fold
20,24fold
29,32fold
33,48fold
49,54fold
55,65fold
25,65fold
11,65fold
let &fdl = &fdl
11
normal! zo
25
normal! zo
let s:l = 65 - ((37 * winheight(0) + 19) / 38)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 65
normal! 06|
wincmd w
2wincmd w
exe 'vert 1resize ' . ((&columns * 30 + 46) / 92)
exe 'vert 2resize ' . ((&columns * 59 + 46) / 92)
exe 'vert 3resize ' . ((&columns * 1 + 46) / 92)
tabnext 1
if exists('s:wipebuf') && len(win_findbuf(s:wipebuf)) == 0 && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20
let &shortmess = s:shortmess_save
let &winminheight = s:save_winminheight
let &winminwidth = s:save_winminwidth
let s:sx = expand("<sfile>:p:r")."x.vim"
if filereadable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &g:so = s:so_save | let &g:siso = s:siso_save
set hlsearch
nohlsearch
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
